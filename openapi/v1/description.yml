introduction: |
  # Introduction

  The Task Management API allows you to manage tasks, update and delete.

  The API documentation will start with a general overview about the design
  and technology that has been implemented, followed by reference information
  about specific endpoints.

  ## HTTP Statuses

  Along with the HTTP methods that the API responds to, it will also return
  standard HTTP statuses, including error codes.

  In the event of a problem, the status will contain the error code, while the
  body of the response will usually contain additional information about the
  problem that was encountered.

  In general, if the status returned is in the 200 range, it indicates that
  the request was fulfilled successfully and that no error was encountered.

  Return codes in the 400 range typically indicate that there was an issue
  with the request that was sent. Among other things, this could mean that you
  did not authenticate correctly, that you are requesting an action that you
  do not have authorization for, that the object you are requesting does not
  exist, or that your request is malformed.

  If you receive a status in the 500 range, this generally indicates a
  server-side problem. This means that we are having an issue on our end and
  cannot fulfill your request currently.

  400 and 500 level error responses will include a JSON object in their body,
  including the following attributes:

  |Name|Type|Description|
  |--- |--- |--- |
  |statusCode|number|HTTP status code|
  |reason|string|Short code reason for the bad request.|
  |message|string|A message providing additional information about the error, including details to help resolve it when possible.|

  ### Example Error Response

    ```
    HTTP/1.1 401 Unauthorized
    {
        "statusCode": 401,
        "reason": "UnauthorizedException",
        "message": "Unauthorized"
    }
    ```

  ## Responses

  When a request is successful, a response body will typically be sent back in
  the form of a JSON object. An exception to this is when a DELETE request is
  processed, which will result in a successful HTTP 204 status and an empty
  response body.

  For example, if you send a GET request to `/v1/users/$user_id` you
  will get back a user object. However, if you send
  the GET request to the general collection at `/v1/users`, you will get
  back an array of object, each object being a user record.

  ### Response for a Single Object
  ```
    {
        "name": "user name"
        . . .
    }
    ```

  ### Response for an Object Collection

  ```
    [
        {
            "name": "user name"
            . . .
        },
        {
            "name": "user name"
            . . .
        }
    ]
  ```

  ## Pagination

  Pagination is done through query string using `page` and `limit` fields.

  `limit` field is used to specify per page data count. `10` is the default value.

  ### Example

  ```
  /v1/users?page=1&limit=10
  ```

  ## Cross Origin Resource Sharing

  In order to make requests to the API from other domains, the API implements
  Cross Origin Resource Sharing (CORS) support.

  CORS support is generally used to create AJAX requests outside of the domain
  that the request originated from. This is necessary to implement projects
  like control panels utilizing the API. This tells the browser that it can
  send requests to an outside domain.

  The procedure that the browser initiates in order to perform these actions
  (other than GET requests) begins by sending a "preflight" request. This sets
  the `Origin` header and uses the `OPTIONS` method. The server will reply
  back with the methods it allows and some of the limits it imposes. The
  client then sends the actual request if it falls within the allowed
  constraints.

  This process is usually done in the background by the browser, but you can
  use curl to emulate this process using the example provided. The headers
  that will be set to show the constraints are:

  *   **Access-Control-Allow-Origin**: This is the domain that is sent by the client or browser as the origin of the request. It is set through an `Origin` header.
  *   **Access-Control-Allow-Methods**: This specifies the allowed options for requests from that domain. This will generally be all available methods.
  *   **Access-Control-Expose-Headers**: This will contain the headers that will be available to requests from the origin domain.
  *   **Access-Control-Max-Age**: This is the length of time that the access is considered valid. After this expires, a new preflight should be sent.
  *   **Access-Control-Allow-Credentials**: This will be set to `true`. It basically allows you to send your OAuth token for authentication.

  You should not need to be concerned with the details of these headers,
  because the browser will typically do all of the work for you.
